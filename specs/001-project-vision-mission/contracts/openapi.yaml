openapi: 3.0.3
info:
  title: 貓狗領養平台 API (MVP)
  version: 0.1.0
servers:
  - url: https://api.example.com
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    UserPublic:
      type: object
      properties:
        user_id:
          type: string
        name:
          type: string
        role:
          type: string
    Listing:
      type: object
      properties:
        listing_id:
          type: string
        owner_id:
          type: string
        species:
          type: string
        breed:
          type: string
        age_estimate:
          type: integer
        gender:
          type: string
        spayed_neutered:
          type: boolean
        description:
          type: string
        location:
          type: string
        photos:
          type: array
          items:
            type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
    ListingCreate:
      type: object
      required: [species, location, photos]
      properties:
        species:
          type: string
        breed:
          type: string
        age_estimate:
          type: integer
        gender:
          type: string
        spayed_neutered:
          type: boolean
        description:
          type: string
        location:
          type: string
        photos:
          type: array
          items:
            type: string
    Application:
      type: object
      properties:
        application_id:
          type: string
        listing_id:
          type: string
        applicant_id:
          type: string
        answers:
          type: object
        status:
          type: string
        submitted_at:
          type: string
          format: date-time
    ApplicationCreate:
      type: object
      required: [listing_id, answers]
      properties:
        listing_id:
          type: string
        answers:
          type: object
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string

paths:
  /auth/register:
    post:
      summary: Create user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, name, password]
              properties:
                email: { type: string }
                name: { type: string }
                password: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        '400': { $ref: '#/components/schemas/Error' }

  /auth/login:
    post:
      summary: Login and receive JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401': { $ref: '#/components/schemas/Error' }

  /listings:
    get:
      summary: List animal listings with pagination and filters
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 1 }
        - name: pageSize
          in: query
          schema: { type: integer, default: 20 }
        - name: species
          in: query
          schema: { type: string }
        - name: ageMin
          in: query
          schema: { type: integer }
        - name: ageMax
          in: query
          schema: { type: integer }
        - name: spayed_neutered
          in: query
          schema: { type: boolean }
        - name: location
          in: query
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  page: { type: integer }
                  pageSize: { type: integer }
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Listing'
    post:
      summary: Create new listing (owner only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListingCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '400': { $ref: '#/components/schemas/Error' }

  /listings/{listingId}:
    get:
      summary: Get listing by id
      parameters:
        - name: listingId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '404': { $ref: '#/components/schemas/Error' }
    put:
      summary: Update listing (owner or admin)
      security:
        - bearerAuth: []
      parameters:
        - name: listingId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListingCreate'
      responses:
        '200': { $ref: '#/components/schemas/Listing' }

  /listings/{listingId}/applications:
    post:
      summary: Submit adoption application for a listing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

  /admin/applications/{applicationId}:
    put:
      summary: Admin review an application (approve/reject)
      security:
        - bearerAuth: []
      parameters:
        - name: applicationId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [approve, reject]
                notes:
                  type: string
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

  /users/{userId}:
    get:
      summary: Get public user info
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'

security: []

# Notes:
# - Authentication uses JWT bearer tokens for protected endpoints.
# - Pagination and filtering are supported on listing endpoints.
# - Detailed error schemas and additional admin endpoints (user management, reports) can be added in Phase 2.
