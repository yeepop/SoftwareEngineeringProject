generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  GENERAL_MEMBER
  SHELTER_MEMBER
  ADMIN
}

enum Species {
  CAT
  DOG
}

enum Sex {
  MALE
  FEMALE
  UNKNOWN
}

enum AnimalStatus {
  DRAFT
  SUBMITTED
  PUBLISHED
  RETIRED
}

enum ApplicationType {
  ADOPTION
  REHOME
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  WITHDRAWN
}

enum MedicalRecordType {
  TREATMENT
  CHECKUP
  VACCINE
  SURGERY
  OTHER
}

enum ExternalDeliveryStatus {
  NOT_APPLICABLE
  PENDING
  SENT
  FAILED
}

enum JobStatus {
  PENDING
  RUNNING
  SUCCEEDED
  FAILED
}

// Models
model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  username           String?
  phoneNumber        String?
  firstName          String?
  lastName           String?
  role               Role           @default(GENERAL_MEMBER)
  verified           Boolean        @default(false)
  primaryShelterId   String?        // optional link for single-account shelters
  primaryShelter     Shelter?       @relation(fields: [primaryShelterId], references: [id])
  profilePhotoUrl    String?
  settings           Json?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  deletedAt          DateTime?

  // relations
  applications       Application[]  @relation("ApplicantApplications")
  notifications      Notification[]
  actorNotifications Notification[]
  animalsOwned       Animal[]       @relation("OwnerAnimals")
  assignedApps       Application[]  @relation("AssigneeApplications")
  createdRecords     MedicalRecord[] @relation("CreatorRecords")
  verifiedRecords    MedicalRecord[] @relation("VerifierRecords")
  jobsCreated        Job[]
  auditLogs          AuditLog[]
}

model Shelter {
  id                   String      @id @default(uuid())
  name                 String
  slug                 String      @unique
  contactEmail         String?
  contactPhone         String?
  address              Json?
  verified             Boolean     @default(false)
  primaryAccountUserId String?     // FK to User who is primary account for this shelter
  primaryAccountUser   User?       @relation(fields: [primaryAccountUserId], references: [id])
  metadata             Json?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  deletedAt            DateTime?

  animals              Animal[]
  auditLogs            AuditLog[]
}

model Animal {
  id            String           @id @default(uuid())
  name          String
  species       Species
  breed         String?
  sex           Sex
  dob           DateTime?
  description   String?
  status        AnimalStatus     @default(DRAFT)

  shelterId     String?
  shelter       Shelter?         @relation(fields: [shelterId], references: [id])

  ownerId       String?
  owner         User?            @relation("OwnerAnimals", fields: [ownerId], references: [id])

  medicalSummary String?
  createdBy     String?
  createdByUser User?            @relation(fields: [createdBy], references: [id])

  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?

  images        AnimalImage[]
  medicalRecords MedicalRecord[]
  applications  Application[]

  @@index([shelterId])
  @@index([ownerId])
}

model AnimalImage {
  id         String   @id @default(uuid())
  animalId   String
  animal     Animal   @relation(fields: [animalId], references: [id])
  storageKey String
  url        String
  mimeType   String?
  width      Int?
  height     Int?
  order      Int?
  createdAt  DateTime @default(now())
}

model Application {
  id             String            @id @default(uuid())
  applicantId    String
  applicant      User              @relation("ApplicantApplications", fields: [applicantId], references: [id])
  animalId       String
  animal         Animal            @relation(fields: [animalId], references: [id])
  type           ApplicationType
  status         ApplicationStatus @default(PENDING)
  submittedAt    DateTime          @default(now())
  reviewedAt     DateTime?
  reviewNotes    String?

  assigneeId     String?
  assignee       User?             @relation("AssigneeApplications", fields: [assigneeId], references: [id])

  version        Int               @default(1)
  idempotencyKey String?
  attachments    Json?

  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deletedAt      DateTime?

  @@index([applicantId, status])
  @@index([animalId])
}

model MedicalRecord {
  id           String             @id @default(uuid())
  animalId     String
  animal       Animal             @relation(fields: [animalId], references: [id])
  recordType   MedicalRecordType
  date         DateTime
  provider     String?
  details      String?
  attachments  Json?
  verified     Boolean            @default(false)

  verifiedBy   String?
  verifiedByUser User?            @relation("VerifierRecords", fields: [verifiedBy], references: [id])

  createdBy    String
  createdByUser User             @relation("CreatorRecords", fields: [createdBy], references: [id])

  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?

  @@index([animalId])
}

model Attachment {
  id         String   @id @default(uuid())
  ownerType  String
  ownerId    String
  storageKey String
  url        String
  filename   String
  mimeType   String
  size       Int
  createdBy  String
  createdAt  DateTime @default(now())
  deletedAt  DateTime?
}

model Notification {
  id                      String               @id @default(uuid())
  recipientId             String
  recipient               User                 @relation(fields: [recipientId], references: [id])
  actorId                 String?
  actor                   User?                @relation("ActorNotifications", fields: [actorId], references: [id])
  type                    String
  payload                 Json?
  read                    Boolean              @default(false)
  createdAt               DateTime             @default(now())
  deliveredAt             DateTime?
  externalDeliveryStatus  ExternalDeliveryStatus @default(NOT_APPLICABLE)
  retryCount              Int                  @default(0)
  lastError               String?

  @@index([recipientId, read])
}

model Job {
  id           String   @id @default(uuid())
  type         String
  status       JobStatus @default(PENDING)
  payload      Json?
  resultSummary Json?
  createdBy    String?
  createdByUser User?    @relation(fields: [createdBy], references: [id])
  createdAt    DateTime @default(now())
  startedAt    DateTime?
  finishedAt   DateTime?
  attempts     Int      @default(0)
}

model AuditLog {
  id         String   @id @default(uuid())
  actorId    String?
  actor      User?    @relation(fields: [actorId], references: [id])
  action     String
  targetType String
  targetId   String?
  before     Json?
  after      Json?
  notes      String?
  timestamp  DateTime @default(now())
  shelterId  String?
  shelter    Shelter? @relation(fields: [shelterId], references: [id])

  @@index([actorId])
}
