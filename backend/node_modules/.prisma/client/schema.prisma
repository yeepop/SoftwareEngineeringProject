// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  passwordHash     String?  @map("password_hash")
  role             String   @default("adopter") // adopter, owner, admin
  profileCompleted Boolean  @default(false) @map("profile_completed")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  animalListings       AnimalListing[]
  adoptionApplications AdoptionApplication[] @relation("ApplicantApplications")
  reviewedApplications AdoptionApplication[] @relation("ReviewerApplications")
  auditLogs            AuditLog[]
  supportConversations SupportConversation[]

  @@index([role])
  @@map("users")
}

model AnimalListing {
  id                 String   @id @default(cuid())
  ownerId            String   @map("owner_id")
  species            String
  breed              String?
  ageEstimate        Int?     @map("age_estimate")
  gender             String? // male, female, unknown
  spayedNeutered     Boolean  @default(false) @map("spayed_neutered")
  description        String?
  location           String
  photos             String // JSON string of image URLs
  healthStatus       String?  @map("health_status")
  vaccinationRecords String?  @map("vaccination_records") // JSON string
  status             String   @default("draft") // draft, pending, active, closed
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  owner        User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  applications AdoptionApplication[]

  @@index([species])
  @@index([location])
  @@index([status])
  @@map("animal_listings")
}

model AdoptionApplication {
  id          String    @id @default(cuid())
  listingId   String    @map("listing_id")
  applicantId String?   @map("applicant_id")
  answers     String // JSON string
  status      String    @default("submitted") // submitted, under_review, approved, rejected
  submittedAt DateTime  @default(now()) @map("submitted_at")
  reviewedAt  DateTime? @map("reviewed_at")
  reviewerId  String?   @map("reviewer_id")
  reviewNotes String?   @map("review_notes")

  // Relations
  listing   AnimalListing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  applicant User?         @relation("ApplicantApplications", fields: [applicantId], references: [id], onDelete: SetNull)
  reviewer  User?         @relation("ReviewerApplications", fields: [reviewerId], references: [id])

  @@index([status])
  @@index([listingId])
  @@map("adoption_applications")
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String   @map("actor_id")
  action     String
  targetType String   @map("target_type")
  targetId   String   @map("target_id")
  timestamp  DateTime @default(now())
  notes      String?

  // Relations
  actor User @relation(fields: [actorId], references: [id])

  @@index([actorId])
  @@index([targetType, targetId])
  @@map("audit_logs")
}

model SupportConversation {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  messages   String // JSON string
  status     String    @default("open") // open, pending_human, resolved
  createdAt  DateTime  @default(now()) @map("created_at")
  resolvedAt DateTime? @map("resolved_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("support_conversations")
}
